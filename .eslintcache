[{"/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/index.js":"1","/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/reportWebVitals.js":"2","/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/App.js":"3","/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/components/Snake.js":"4","/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/components/Apple.js":"5"},{"size":500,"mtime":1612067435861,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1612067435862,"results":"8","hashOfConfig":"7"},{"size":11626,"mtime":1612755060408,"results":"9","hashOfConfig":"7"},{"size":3845,"mtime":1612750246942,"results":"10","hashOfConfig":"7"},{"size":279,"mtime":1612751567154,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"12vxcd1",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/index.js",[],["24","25"],"/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/reportWebVitals.js",[],"/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/App.js",["26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43"],"/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/components/Snake.js",["44"],"import React from 'react';\n\nconst Snake = (props) => {\n    return (\n        <div>\n            {props.snakeCoordinates.map((body, i) => {\n                const cellPercentageWidth = 2;\n\n                // Set current position for each snake body part.\n                const style = {\n                    left: `${body[1] * cellPercentageWidth}%`,\n                    top: `${body[0] * cellPercentageWidth}%`,\n                };\n\n                // Set triangle style as per current direction.\n                var styleDirection;\n                switch (props.direction) {\n                    case \"UP\":\n                        styleDirection = {\n                            borderLeft: `${cellPercentageWidth * 0.01/2 * props.pixelGridSize}px solid transparent`,\n                            borderRight: `${cellPercentageWidth * 0.01/2 * props.pixelGridSize}px solid transparent`,\n                            borderBottom: `${cellPercentageWidth * 0.01 * props.pixelGridSize}px solid #000`,\n                            left: `${body[1] * cellPercentageWidth + 0.2}%`,\n                            top: `${body[0] * cellPercentageWidth + 0.3}%`,\n                        };\n                        break;\n                    case \"DOWN\":\n                        styleDirection = {\n                            borderTop: `${cellPercentageWidth * 0.01 * props.pixelGridSize}px solid #000`,\n                            borderLeft: `${cellPercentageWidth * 0.01/2 * props.pixelGridSize}px solid transparent`,\n                            borderRight: `${cellPercentageWidth * 0.01/2 * props.pixelGridSize}px solid transparent`,\n                            left: `${body[1] * cellPercentageWidth + 0.2}%`,\n                            top: `${body[0] * cellPercentageWidth - 0.2}%`,\n                        };\n                        break;\n                    case \"RIGHT\":\n                        styleDirection = {\n                            borderTop: `${cellPercentageWidth * 0.01/2 * props.pixelGridSize}px solid transparent`,\n                            borderLeft: `${cellPercentageWidth * 0.01 * props.pixelGridSize}px solid #000`,\n                            borderBottom: `${cellPercentageWidth * 0.01/2 * props.pixelGridSize}px solid transparent`,\n                            left: `${body[1] * cellPercentageWidth + 0.1}%`,\n                            top: `${body[0] * cellPercentageWidth + 0.2}%`,\n                        };\n                        break;\n                    case \"LEFT\":\n                        styleDirection = {\n                            borderTop: `${cellPercentageWidth * 0.01/2 * props.pixelGridSize}px solid transparent`,\n                            borderRight: `${cellPercentageWidth * 0.01 * props.pixelGridSize}px solid #000`,\n                            borderBottom: `${cellPercentageWidth * 0.01/2 * props.pixelGridSize}px solid transparent`,\n                            left: `${body[1] * cellPercentageWidth + 0.4}%`,\n                            top: `${body[0] * cellPercentageWidth + 0.2}%`,\n                        };\n                        break;\n                }\n\n                // Set current style.\n                var currentStyle;\n                if (i === props.snakeCoordinates.length - 1) {\n                    // currentStyle = Object.assign({}, styleDirection, style);\n                    currentStyle = styleDirection;\n                }else {\n                    currentStyle = style;\n                }\n\n                // Set current class.\n                const currentClass = i === props.snakeCoordinates.length - 1 ? \"snake-head\" : \"snake-body\";\n\n                // Return snake body classes.\n                return (\n                    <div className={currentClass} key={i} style={currentStyle}></div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Snake;","/Users/samuelrieger/Projects/ReactProjects/snake-ai/src/components/Apple.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":17,"nodeType":"51","messageId":"52","endLine":1,"endColumn":26},{"ruleId":"49","severity":1,"message":"53","line":4,"column":10,"nodeType":"51","messageId":"52","endLine":4,"endColumn":31},{"ruleId":"49","severity":1,"message":"54","line":29,"column":25,"nodeType":"51","messageId":"52","endLine":29,"endColumn":41},{"ruleId":"49","severity":1,"message":"55","line":30,"column":20,"nodeType":"51","messageId":"52","endLine":30,"endColumn":31},{"ruleId":"49","severity":1,"message":"56","line":41,"column":17,"nodeType":"51","messageId":"52","endLine":41,"endColumn":25},{"ruleId":"49","severity":1,"message":"57","line":45,"column":10,"nodeType":"51","messageId":"52","endLine":45,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":66,"column":5,"nodeType":"60","messageId":"61","endLine":78,"endColumn":6},{"ruleId":"62","severity":1,"message":"63","line":117,"column":14,"nodeType":"51","messageId":"64","endLine":117,"endColumn":15},{"ruleId":"65","severity":1,"message":"66","line":118,"column":38,"nodeType":"67","messageId":"68","endLine":118,"endColumn":40},{"ruleId":"65","severity":1,"message":"66","line":145,"column":34,"nodeType":"67","messageId":"68","endLine":145,"endColumn":36},{"ruleId":"65","severity":1,"message":"66","line":152,"column":28,"nodeType":"67","messageId":"68","endLine":152,"endColumn":30},{"ruleId":"69","severity":1,"message":"70","line":176,"column":17,"nodeType":"71","messageId":"72","endLine":176,"endColumn":28},{"ruleId":"65","severity":1,"message":"73","line":259,"column":25,"nodeType":"67","messageId":"68","endLine":259,"endColumn":27},{"ruleId":"65","severity":1,"message":"66","line":325,"column":17,"nodeType":"67","messageId":"68","endLine":325,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":325,"column":51,"nodeType":"67","messageId":"68","endLine":325,"endColumn":53},{"ruleId":"65","severity":1,"message":"66","line":351,"column":19,"nodeType":"67","messageId":"68","endLine":351,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":351,"column":41,"nodeType":"67","messageId":"68","endLine":351,"endColumn":43},{"ruleId":"58","severity":1,"message":"59","line":376,"column":7,"nodeType":"60","messageId":"61","endLine":389,"endColumn":8},{"ruleId":"58","severity":1,"message":"59","line":17,"column":17,"nodeType":"60","messageId":"61","endLine":54,"endColumn":18},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'findAllByDisplayValue' is defined but never used.","'setPixelGridSize' is assigned a value but never used.","'setGridSize' is assigned a value but never used.","'setSpeed' is assigned a value but never used.","'update' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-redeclare","'i' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]